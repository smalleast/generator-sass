/*background-color Start*/
@mixin generator-background-color($inMap,$inPrefix:'.bg-'){
  @each $name,$color in $inMap{
    #{$inPrefix}#{$name}{
      background-color:#{$color};
    }
  }
}
/*background-color End*/

/*blank Start*/
.blank {
  display: block;
  font-size: 0;
  overflow: hidden;
  clear: both;
}

@mixin generator-blank($inList,$inPrefix:'.blank-'){
  #{$inPrefix} {
    @each $i in $inList{
      &#{$i}{
        height:#{$i}px;
        @extend .blank;
      }
    }
  }
}


/*blank End*/


/*border-color Start*/
@mixin generator-border-color($inMap,$inPrefix:'.bdc-'){
  @each $name,$color in $inMap{
    #{$inPrefix}#{$name}{
      border-color:#{$color};
    }
  }
}
/*border-color End*/

/*border-radius Start*/
@mixin generator-border-radius($inList,$inPrefix:'.bdr-'){
  #{$inPrefix} {
    @each $i in $inList{
      &#{$i}{
        border-radius: #{$i}px;
      }
    }
  }
}
/*border-radius End*/

/*color Start*/
@mixin generator-color($inMap,$inPrefix:'.c-'){
  @each $name,$color in $inMap{
    #{$inPrefix}#{$name}{
      color:#{$color};
    }
  }
}
/*color End*/

/*font-size Start*/
@mixin generator-font-size($inList,$inPrefix:'.f-'){
  #{$inPrefix} {
    @each $i in $inList{
      &#{$i}{
        font-size:#{$i}px;
      }
    }
  }
}
/*font-size End*/

/*line-clamp Start*/
.line-clamp {
  overflow: hidden;
  text-overflow: ellipsis;
  display: flex;
  display: -webkit-box;
  -webkit-box-orient: vertical;
}
@mixin line-clamp($inLine) {
  overflow: hidden;
  text-overflow: ellipsis;
  display: flex;
  display: -webkit-box;
  -webkit-line-clamp: $inLine;
  -webkit-box-orient: vertical;
}


@mixin generator-line-clamp($inList,$inPrefix:'.lc-'){
  #{$inPrefix} {
    @each $i in $inList{
      &#{$i}{
        -webkit-line-clamp: $i;
        @extend .line-clamp;
      }
    }
  }
}

/*line-clamp End*/

/*line-height Start*/
@mixin generator-line-height($inList,$inPrefix:'.lh-') {
  #{$inPrefix} {
    @each $i in $inList {
      &#{$i} {
        line-height: #{$i}px;
      }
    }
  }
}

@mixin generator-hlh($inList,$inPrefix:'.hlh-') {
  #{$inPrefix} {
    @each $i in $inList {
      &#{$i} {
        height: #{$i}px;
        line-height: #{$i}px;
      }
    }
  }
}
/*line-height End*/

/*line Start*/
@mixin generator-line($inList,$inColor:ddd,$inPrefix:'.line-') {
  #{$inPrefix} {
    @each $i in $inList {
      &#{$i}#{'-'$inColor} {
        height: #{$i}px;
        background-color: $inColor;
        @extend .blank;
      }
    }
  }
}

/*line End*/

/*margin Start*/
$margin-map:(
  m:margin,
  mt:margin-top,
  mr:margin-right,
  mb:margin-bottom,
  ml:margin-left,
  mx:(margin-left,margin-right),
  my:(margin-top,margin-bottom)
);

.mr_->*:last-child{
  margin-right: 0;
}
.ml_->*:first-child{
  margin-left: 0;
}

@mixin generator-margin($inList,$inDirection:'m'){
  $mapValue:map_get($margin-map,$inDirection);
  $typeof:type-of($mapValue);

  @if $typeof =='string'{
    .#{$inDirection} {
      @each $i in $inList{
        &#{$i}{
          &,
          &_>*{
            #{$mapValue}:#{$i}px;
          }
        }
      }
    }
  }@else{
    .#{$inDirection} {
      @each $i in $inList{
        &#{$i}{
          &,
          &_>*{
            //mapValue is a `list`
            @each $mapItem in $mapValue{
              #{$mapItem}:#{$i}px;
            }
          }
        }
      }
    }
  }
}

@mixin generator-margin-m($inList){
  @include generator-margin($inList,'m');
}

@mixin generator-margin-mt($inList){
  @include generator-margin($inList,'mt');
}

@mixin generator-margin-mr($inList){
  @include generator-margin($inList,'mr');
}

@mixin generator-margin-mb($inList){
  @include generator-margin($inList,'mb');
}

@mixin generator-margin-ml($inList){
  @include generator-margin($inList,'ml');
}

@mixin generator-margin-mx($inList){
  @include generator-margin($inList,'mx');
}

@mixin generator-margin-my($inList){
  @include generator-margin($inList,'my');
}



/*margin End*/

/*padding Start*/
$padding-map: (
  p:padding,
  pt:padding-top,
  pr:padding-right,
  pb:padding-bottom,
  pl:padding-left,
  px:(padding-left,padding-right),
  py:(padding-top,padding-bottom)
);

.pr_->*:last-child{
  padding-right: 0;
}
.pl_->*:first-child{
  padding-left: 0;
}

@mixin generator-padding($inList,$inDirection:'p') {
  $mapValue: map_get($padding-map,$inDirection);
  $typeof: type-of($mapValue);

  @if $typeof =='string' {
    .#{$inDirection} {
      @each $i in $inList {
        &#{$i} {
          &,
          &_>*{
            #{$mapValue}: #{$i}px;
          }
        }
      }
    }
  }
  @else {
    .#{$inDirection} {
      @each $i in $inList {
        &#{$i} {
          &,
          &_>*{
            //mapValue is a `list`
            @each $mapItem in $mapValue {
              #{$mapItem}: #{$i}px;
            }
          }
        }
      }
    }
  }
}
@mixin generator-padding-p($inList) {
   @include generator-padding($inList,'p');
}
@mixin generator-padding-pt($inList) {
   @include generator-padding($inList,'pt');
}
@mixin generator-padding-pr($inList) {
   @include generator-padding($inList,'pr');
}
@mixin generator-padding-pb($inList) {
   @include generator-padding($inList,'pb');
}
@mixin generator-padding-pl($inList) {
   @include generator-padding($inList,'pl');
}
@mixin generator-padding-px($inList) {
   @include generator-padding($inList,'px');
}
@mixin generator-padding-py($inList) {
   @include generator-padding($inList,'py');
}
/*padding End*/

/*width Start*/
@mixin generator-width-w1($inList,$inPrefix:'.w1-') {
  @each $value in $inList{
    #{$inPrefix}#{$value} {
      width: #{100/$value+'%'};
    }
  }
}

@mixin generator-width-wp($inList,$inPrefix:'.wp-') {
  @each $value in $inList{
    #{$inPrefix}#{$value} {
      width: #{$value*10%};
    }
  }
}
/*width End*/
